<?php

include_once 'includes/commerce_bpost.webservice.inc';

/**
 * Implements hook_entity_info().
 */
function commerce_bpost_entity_info() {
  $return = array(
    'commerce_bpost_rate' => array(
      'label' => t(
        'bpost Rate', array(), array('context' => 'a bpost rate relative to a shipping service')
      ),
      'controller class' => 'DrupalCommerceEntityController',
      'locking mode' => 'pessimistic',
      'base table' => 'commerce_bpost_rate',
      'load hook' => 'commerce_bpost_rate_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'rate_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'rate' => array(
          'label' => t('bpost Rate', array(), array('context' => 'a bpost rate relative to a shipping service'))
        ),
      ),
      'token type' => 'commerce-bpost-rate',
      'metadata controller class' => '',
      'access callback' => 'commerce_entity_access',
      'access arguments' => array('administer shipping'),
      'permission labels' => array(
        'singular' => t('bpost rate'),
        'plural' => t('bpost rates'),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_permission().
 */
function commerce_bpost_permission() {
  return array(
    'administer bpost' => array(
      'title' => t('Administer bpost settings'),
      'description' => t('Configure bpost shipping service.'),
    ),
  );
}

/**
 * Implement hook_entity_info_alter().
 */
function commerce_bpost_entity_info_alter(&$entity_info) {
  // Add a Bpost bundle to the commerce_order entity.
  if (isset($entity_info['commerce_order'])) {
    $entity_info['commerce_order']['bundles']['bpost'] = array(
      'label' => t('Bpost'),
    );
  }
}

/**
 * Implements hook_menu().
 */
function commerce_bpost_menu() {
  $items['admin/commerce/config/commerce_bpost'] = array(
    'title' => 'bpost Shipping service',
    'description' => 'Manage bpost Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_configure_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );
  // Account
  $items['admin/commerce/config/commerce_bpost/configure'] = array(
    'title' => 'Account',
    'description' => 'Manage your bpost Account settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  // Shipping services
  $items['admin/commerce/config/commerce_bpost/shipping_services'] = array(
    'title' => 'Country settings',
    'description' => 'Manage your bpost Shipping services',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_shipping_services_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );
  // Order Mapping
  $items['admin/commerce/config/commerce_bpost/mapping'] = array(
    'title' => 'Order mapping',
    'description' => 'Manage your bpost Order Mapping',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_mapping_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );
  // Label
  $items['admin/commerce/config/commerce_bpost/label'] = array(
    'title' => 'Label',
    'description' => 'Manage your bpost Labels',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_label_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );
  // Tracking & Emails
  $items['admin/commerce/config/commerce_bpost/tracking'] = array(
    'title' => 'Tracking & Emails',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_tracking_email_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );
  // Options
  $items['admin/commerce/config/commerce_bpost/options'] = array(
    'title' => 'Options',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bpost_options_form'),
    'access arguments' => array('administer bpost'),
    'file' => 'includes/commerce_bpost.admin.inc',
  );

  foreach (commerce_shipping_services('bpost') as $service_name => $shipping_service) {
    // Convert underscores to hyphens for the menu item argument.
    $service_name_arg = 'bpost' . '-' . strtr($service_name, '_', '-');

    // Shipping services links.
    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rates'] = array(
      'title' => 'manage rates',
      'page callback' => 'commerce_bpost_rates_view',
      'page arguments' => array(
        $service_name
      ),
      'access arguments' => array('administer bpost'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 0,
    );
    // Shipping service rate CRUD Links.
    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rates/add'] = array(
      'title' => 'add a rate',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'commerce_bpost_rate_form',
        commerce_bpost_rate_new($service_name),
      ),
      'access arguments' => array('administer bpost'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 1,
      'file' => 'includes/commerce_bpost.forms.inc',
    );
    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_bpost_rate'] = array(
      'title callback' => 'commerce_bpost_rate_title',
      'title arguments' => array(7),
      'page callback' => 'commerce_bpost_view_rate_wrapper',
      'page arguments' => array(7),
      'access arguments' => array('administer bpost'),
      'weight' => 48,
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_bpost_rate/edit'] = array(
      'title' => 'edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_bpost_rate_form', 7),
      'access arguments' => array('administer bpost'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 49,
      'file' => 'includes/commerce_bpost.forms.inc',
    );

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/%commerce_bpost_rate/delete'] = array(
      'title' => 'delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'commerce_bpost_delete_rate_form',
        7,
      ),
      'access arguments' => array('administer bpost'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 50,
      'file' => 'includes/commerce_bpost.forms.inc',
    );
  }

  $items['admin/commerce/orders/add/bpost'] = array(
    'title' => 'Add a bpost order',
    'description' => 'Create a new bpost order.',
    'page callback' => 'commerce_order_ui_order_form_wrapper',
    'page arguments' => array(commerce_order_new(0, NULL, 'bpost')),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('create'),
    'weight' => 10,
    'file' => 'includes/commerce_order_ui.orders.inc',
    'file path' => drupal_get_path('module', 'commerce_order_ui'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_bpost_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/orders/add' on 'admin/commerce/orders'.
  if ($root_path == 'admin/commerce/orders/bpost-orders') {
    $item = menu_get_item('admin/commerce/orders/add/bpost');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_requirements().
 */
function commerce_bpost_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    $file_private_path = variable_get('file_private_path');

    if (empty($file_private_path)) {
      $requirements['commerce_bpost'] = array(
        'title' => $t('Commerce BPost'),
        'description' => $t('Path for private files has to be defined. Please <a href="@url">configure private file path in file system settings</a> to be able to generate pdf labels.', array('@url' => url('admin/config/media/file-system'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Private file path empty'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_theme().
 */
function commerce_bpost_theme() {
  return array(
    'commerce_bpost_mapping_form' => array(
      'render element' => 'form',
    ),
    'commerce_bpost_profile_mapping' => array(
      'render element' => 'form',
    ),
    'commerce_bpost_order_mapping' => array(
      'render element' => 'form',
    ),
    'commerce_bpost_shipping_service' => array(
      'path' => drupal_get_path('module', 'commerce_bpost') . '/theme',
      'template' => 'commerce-bpost-shipping-service',
      'render element' => 'content',
    ),
    'commerce_bpost_rate' => array(
      'variables' => array(
        'commerce_bpost_rate' => ''
      ),
    ),
    'commerce_bpost_point' => array(
      'variables' => array(
        'point' => ''
      ),
    ),
    'commerce_bpost_map' => array(
      'render element' => 'element',
    ),
    'commerce_bpost_file_link' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL),
    ),
  );
}

/**
 * Callback for getting order properties.
 * @see commerce_order_entity_property_info()
 */
function commerce_bpost_get_properties($commerce_bpost_rate, array $options, $name) {
  switch ($name) {
    case 'rates':
      $rates = unserialize($commerce_bpost_rate->rates);
      return $rates;
  }
}

/**
 * Get all customer profile fields.
 *
 * @param string $customer_profile_type
 *   The customer profile type we want to extract all fields from.
 * @return array
 *   An array of field keyed by machine name.
 */
function commerce_bpost_get_all_customer_profile_fields($customer_profile_type) {
  $fields = array();
  $adressfield = FALSE;
  $customer_profile_fields = field_info_instances('commerce_customer_profile', $customer_profile_type);
  foreach ($customer_profile_fields as $field) {
    if ($field['widget']['module'] !== "addressfield") {
      $fields[$field['field_name']] = $field['label'] . ' - (' . $field['field_name'] . ')';
    }
    else {
      $adressfield = $field['field_name'];
    }
  }
  if ($adressfield) {
    foreach (addressfield_data_property_info() as $address_field_name => $address_field_info) {
      $fields[$adressfield . '|' . $address_field_name] = $address_field_info['label'] . ' - (' . $address_field_name . ')';
    }
  }
  return $fields;
}

/**
 * This function return an option list with all the user field.
 */
function commerce_bpost_get_all_user_fields() {
  $user_fields = field_info_instances('user');
  $fields = array();
  if (!empty($user_fields['user'])) {
    foreach ($user_fields['user'] as $field) {
      $fields[$field['field_name']] = $field['label'] . ' (' . $field['field_name'] . ')';
    }
  }
  return $fields;
}

/**
 * Theme function to render profile mapping as table.
 */
function theme_commerce_bpost_profile_mapping($variables) {
  if (!empty($variables['form_element_mapping'])) {
    $rows = array();
    $header = array(t('Field'), t('Description'), t('Mapping'));
    foreach (element_children($variables['form_element_mapping']) as $key) {
      $rows[] = array(
        $key,
        !empty($variables['form_element_mapping'][$key]['#description']) ? $variables['form_element_mapping'][$key]['#description'] : '',
        drupal_render($variables['form_element_mapping'][$key]),
      );
    }
    if (!empty($rows)) {
      return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => array('bpost-profile-mapping'))));
    }
  }
  return '<div id="bpost-profile-mapping"></div>';
}

/**
 * Theme function to render order mapping as table.
 */
function theme_commerce_bpost_order_mapping($variables) {
  if (!empty($variables['form_element_mapping'])) {
    $rows = array();
    $header = array(t('Field'), t('Description'), t('Mapping'));
    foreach (element_children($variables['form_element_mapping']) as $key) {
      $rows[] = array(
        $key,
        !empty($variables['form_element_mapping'][$key]['#description']) ? $variables['form_element_mapping'][$key]['#description'] : '',
        drupal_render($variables['form_element_mapping'][$key]),
      );
    }
    if (!empty($rows)) {
      return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => array('bpost-profile-mapping'))));
    }
  }
  return '';
}

/**
 * Returns an initialized commerce_bpost_rate object.
 *
 * @param string $service_name
 *   The uid of the owner of the order.
 * @param string $bundle
 *   Bundle name of commerce_bpost_rate entity type.
 *
 * @return mixed
 *   A commerce_bpost_rate object with all default fields initialized.
 */
function commerce_bpost_rate_new($service_name, $bundle = 'rate') {
  if (!array_key_exists($service_name, commerce_shipping_services('bpost'))) {
    return array();
  }

  return entity_create('commerce_bpost_rate',
    array(
      'rate_id' => '',
      'name' => $service_name,
      'type' => $bundle,
      'bpost_min_weight' => '',
      'bpost_max_weight' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    )
  );
}

/**
 * Saves a bpost service rate.
 *
 * @param array $commerce_bpost_rate
 *   The full bpost rate object to save.
 *
 * @return int
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_bpost_rate_save($commerce_bpost_rate) {
  return entity_save('commerce_bpost_rate', $commerce_bpost_rate);
}

/**
 * Loads a bpost rate by id.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 *
 * @return object
 *   The fully loaded rate object.
 */
function commerce_bpost_rate_load($rate_id) {
  $rates = commerce_bpost_rate_load_multiple(array($rate_id));

  return $rates ? reset($rates) : FALSE;
}

/**
 * Loads multiple service rates.
 *
 * @param array $rate_ids
 *   An array of rate_id
 * @param array $conditions
 *   An array of conditions to filter loaded rates by on the
 *   {commerce_bpost_rate} table in the form 'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal rate loading cache.
 */
function commerce_bpost_rate_load_multiple($rate_ids, $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_bpost_rate', $rate_ids, $conditions, $reset);
}

/**
 * Deletes a bpost service rate.
 *
 * @param int|string $rate_id
 *   The primary identifier of a rate.
 */
function commerce_bpost_rate_delete($rate_id) {
  return entity_delete('commerce_bpost_rate', $rate_id);
}

/**
 * Deletes multiple bpost service rates.
 *
 * @param array $rates_ids
 *   An array of rate_id.
 */
function commerce_bpost_rate_delete_multiple($rates_ids) {
  return entity_delete_multiple('commerce_bpost_rate', $rates_ids);
}

/**
 * Title callback: Returns the title of a commerce_bpost_rate entity type.
 *
 * @param object $commerce_bpost_rate
 *   A fully loaded $commerce_bpost_rate object.
 *
 * @return string
 *   The menu title
 */
function commerce_bpost_rate_title($commerce_bpost_rate) {
  return t('Rate @rate_id', array("@rate_id" => $commerce_bpost_rate->rate_id));
}

/**
 * Wrapper callback: Display a commerce_bpost_rate object.
 *
 * @param object $commerce_bpost_rate
 *   A fully loaded commerce_bpost_rate object.
 *
 * @return array
 *   Returns a renderable array to display a $commerce_bpost_rate
 *   object.
 */
function commerce_bpost_view_rate_wrapper($commerce_bpost_rate) {
  return array(
    '#markup' => theme('commerce_bpost_rate', array('commerce_bpost_rate' => $commerce_bpost_rate))
  );
}

/**
 * Return a rendered commerce_bpost_rate object.
 */
function theme_commerce_bpost_rate($variables) {
  $render = array();
  $commerce_bpost_rate = $variables['commerce_bpost_rate'];
  $render['bpost_min_weight'] = array(
    '#markup' => '<label>' . t('Min weight:') . ' </label>' . physical_weight_format($commerce_bpost_rate->bpost_min_weight[LANGUAGE_NONE][0]),
  );
  $render['bpost_max_weight'] = array(
    '#markup' => '<label>' . t('Max weight:') . ' </label>' . physical_weight_format($commerce_bpost_rate->bpost_max_weight[LANGUAGE_NONE][0]),
  );
  if (!empty($commerce_bpost_rate->rates)) {
    include_once DRUPAL_ROOT . '/includes/locale.inc';
    $country_get_list = country_get_list();
    $rows = array();
    $header = array(t('Country'), t('Amount'));
    foreach (commerce_bpost_get_properties($commerce_bpost_rate, array(), 'rates') as $country_code => $value) {
      $rows[] = array($country_get_list[$country_code], $value . ' €');
    }
    $render['rates'] = array(
      '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
    );
  }
  return render($render);
}

/**
 * Return a commerce_bpost point.
   */
function theme_commerce_bpost_point($variables) {
  $render = array();
  $point = $variables['point'];
  $schedule = isset($variables['schedule']) ? $variables['schedule'] : TRUE;
  if (isset($point['Record']['Street'])) {
    $addresspart1 = $point['Record']['Name'];
    $addresspart2 = $point['Record']['Street'];
    $addresspart2 .= ' ' . $point['Record']['Number'];
    $addresspart3 = ' ' . $point['Record']['Zip'];
    $addresspart3 .= ' ' . $point['Record']['City'];
  }
  else {
    $addresspart1 = $point['Record']['OFFICE'];
    $addresspart2 = ' ' . $point['Record']['STREET'];
    $addresspart3 = ' ' . $point['Record']['ZIP'];
    $addresspart3 .= ' ' . $point['Record']['CITY'];
  }

  if (!empty($point['Distance'])) {
    $distance = round($point['Distance'] / 1000, 2);
  }
  else {
    $distance = 0;
  }

  $items = array(
    $addresspart1,
    $addresspart2,
    $addresspart3,
  );
  if (!empty($distance)) {
    $items[] = $distance . ' km';
  }


  $variables = array(
    'items' => $items,
    'type' => 'ul',
    'attributes' => array('class' => array('bpost-point-list')),
  );
  if (!empty($point['Favorite'])) {
    $variables['attributes']['class'][] = 'bpost-point-favorite';
  }
  $output = theme('item_list', $variables);
  $render['point'] = array(
    '#markup' => $output,
  );

  if ($schedule && isset($point['Record']['Hours']) && isset($point['Record']['Type']) && $point['Record']['Type'] != 4) {
    $hours_items = array();
    $variables = array();
    foreach ($point['Record']['Hours'] as $day => $hours) {
      $hours_info = NULL;
      foreach ($hours as $hour) {
        if (!empty($hour)) {
          $hours_info .= $hour . ' - ';
        }
      }
      if (!$hours_info) {
        $hours_info = t('N/A');
      }
      else{
        $hours_info = substr($hours_info, 0, -3);
      }
      $variables[] = array(array('data' => t($day), 'class' => array('day')), array('data' => t($hours_info), 'class' => array('time')));
    }
    $output = theme('table', array('rows' => $variables, 'attributes' => array('class' => array('schedule'))));
    $render['hours'] = array(
      '#markup' => $output,
    );
  }


  return render($render);
}

/**
 * Return list of rates as table for a bpost shipping service.
 *
 * @param $service
 *  The machine name of the shipping service.
 *
 * @return string
 *  The table of rates
 */
function commerce_bpost_rates_view($service) {
  $commerce_bpost_rates = commerce_bpost_get_rates($service);
  if (!empty($commerce_bpost_rates)) {
    $commerce_bpost_settings = variable_get('commerce_bpost_settings', array());
    include_once DRUPAL_ROOT . '/includes/locale.inc';
    $country_get_list = country_get_list();
    $headers = array(t('From'), t('To'));
    $rows = array();
    $countries = array();

    if (!empty($commerce_bpost_settings['shipping_services']['country_list'])) {
      if ($service != "bpost_world") {
        $headers[] = t('Belgium');
        $countries[] = 'BE';
      }
      else {
        foreach ($commerce_bpost_settings['shipping_services']['country_list'] as $country_code) {
          if ($country_code != 'BE') {
            $headers[] = t($country_get_list[$country_code]);
            $countries[] = $country_code;
          }
        }
      }
    }
    foreach ($commerce_bpost_rates as $commerce_bpost_rate) {
      $rates_row = array();
      $rates = commerce_bpost_get_properties($commerce_bpost_rate, array(), 'rates');
      foreach ($countries as $country) {
        $rates_row[] = (isset($rates[$country])) ? $rates[$country] . ' €' : 0;
      }
      // Convert underscores to hyphens for the menu item argument.
      $service_name_arg = 'bpost' . '-' . strtr($commerce_bpost_rate->name, '_', '-');
      $rows[] = array_merge(
        array(
          physical_weight_format($commerce_bpost_rate->bpost_min_weight[LANGUAGE_NONE][0]),
          physical_weight_format($commerce_bpost_rate->bpost_max_weight[LANGUAGE_NONE][0]),
        ),
        $rates_row,
        array(l(t('Edit'), 'admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/' . $commerce_bpost_rate->rate_id . '/edit') . ' - ' . l(t('Delete'), 'admin/commerce/config/shipping/services/' . $service_name_arg . '/rate/' . $commerce_bpost_rate->rate_id . '/delete'))
      );
    }
    $headers[] = t('Operations');

    $render = array(
      'table' => array(
        '#theme' => 'table',
        '#header' => $headers,
        '#rows' => $rows,
      ),
      'help' => array(
        '#markup' => t('Example rate1: 0-10kg and rate2: 10-20kg. If products weight = 10kg, rate1 is applied. If products weight = 10.2kg, rate2 is applied.')
      ),
    );

    return $render;
  }
  return t('No rates for this shipping service yet');
}

/**
 * Returns an array of fully loaded rate of a bpost shipping service.
 *
 * @param string $service
 *  The machine name of the shipping service.
 *
 * @return array
 *  Return array of fully loaded rate of a bpost shipping service.
 */
function commerce_bpost_get_rates($service) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_bpost_rate')
    ->propertyCondition('name', $service);
  $result = $query->execute();
  if (isset($result['commerce_bpost_rate'])) {
    return commerce_bpost_rate_load_multiple(array_keys($result['commerce_bpost_rate']));
  }
  else{
    return array();
  }
}

/**
 * Gets field value of the given entity from bpost mapping field.
 *
 * @param $bpost_field_name
 *  The field name on bpost side.
 * @param $entity_wrapped
 *  The entity we want to get field value from.
 * @param $mapping
 *  The mapping of the bpost/Drupal fields for this entity.
 * @param $entity_type
 *  The entity type of the entity.
 *
 * @return bool|string
 *  The field value.
 */
function commerce_bpost_get_field_value($bpost_field_name, $entity_wrapped, $mapping, $entity_type) {
  $value = '';
  if (!empty($mapping[$bpost_field_name])) {
    $field = $mapping[$bpost_field_name];
    $field = explode('|', $field);
    $field_info = field_info_instance($entity_type, $field[0], $entity_wrapped->getBundle());
    // If field exist on this entity bundle.
    if (!empty($field_info)) {
      $field_info = field_info_field($field[0]);
      // Get different value depending on field type.
      $field_value = $entity_wrapped->$field[0]->value();
      if ($field_info['type'] === 'image' && !empty($field_value[0])) {
        $value = file_create_url($field_value[0]['uri']);
      }
      elseif (in_array($field_info['type'], array('datetime', 'date', 'datestamp', 'number_decimal', 'number_float', 'number_integer', 'list_float', 'list_integer', 'list_text', 'text_long', 'text', 'text_long', 'text_with_summary', 'physical_dimensions', 'physical_weight'))) {
        $value = $field_value;
      }
      elseif ($field_info['type'] === "taxonomy_term_reference") {
        $value = $entity_wrapped->$field[0]->name->value();
      }
      elseif ($field_info['type'] === "text_with_summary" && !empty($field_value['safe_value'])) {
        $value = $field_value['safe_value'];
      }
      elseif ($field_info['type'] === "addressfield") {
        $value = $entity_wrapped->$field[0]->$field[1]->value();
      }
    }
  }
  return (string) $value;
}

/**
 * Return a fully loaded commerce_bpost_rate based on a weight parameter.
 *
 * @param string $service_name
 *   The bpost shipping service name.
 * @param array $weight
 *   A weight array:
 *   - unit: the weight unit (kg, oz...).
 *   - weight: total weight.
 *
 * @return mixed
 *   A fully loaded commerce_bpost_rate. Empty array if an error is found.
 */
function commerce_bpost_get_rate_by_weight($service_name, $weight) {
  $query = new EntityFieldQuery();
  if (!isset($weight['weight']) || !array_key_exists($service_name, commerce_shipping_services('bpost'))) {
    $query->entityCondition('entity_type', 'commerce_bpost_rate')
      ->propertyCondition('name', $service_name, '=')
      ->fieldOrderBy('bpost_min_weight', 'weight', 'ASC')
      ->fieldCondition('bpost_min_weight', 'weight', 0, '>=')
      ->fieldOrderBy('bpost_min_weight', 'weight', 'ASC')
      ->range(0, 1);
  }
  else {
    $weight = physical_weight_convert($weight, 'kg');
    $query->entityCondition('entity_type', 'commerce_bpost_rate')
      ->propertyCondition('name', $service_name, '=')
      ->fieldCondition('bpost_min_weight', 'weight', $weight['weight'], '<')
      ->fieldCondition('bpost_max_weight', 'weight', $weight['weight'], '>=')
      ->fieldOrderBy('bpost_min_weight', 'weight', 'ASC')
      ->range(0, 1);
  }

  $result = $query->execute();
  if (isset($result['commerce_bpost_rate'])) {
    $result = commerce_bpost_rate_load(key($result['commerce_bpost_rate']));
  }

  return $result;
}

/**
 * Implements hook_action_info().
 */
function commerce_bpost_action_info() {
  return array(
    'commerce_bpost_print_label' => array(
      'type' => 'commerce_order',
      'label' => t('Print label(s)'),
      'configurable' => TRUE,
    ),
    'commerce_bpost_mark_as_treated' => array(
      'type' => 'commerce_order',
      'label' => t('Mark as treated'),
      'configurable' => FALSE,
    ),
    'commerce_bpost_tracking_mail' => array(
      'type' => 'commerce_order',
      'label' => t('Send T&T mail'),
      'configurable' => FALSE,
    ),
    'commerce_bpost_create_retour' => array(
      'type' => 'commerce_order',
      'label' => t('Print retour label(s)'),
      'configurable' => TRUE,
    ),
    'commerce_bpost_unlist_order' => array(
      'type' => 'commerce_order',
      'label' => t('Remove order from bpost order listing'),
      'configurable' => FALSE,
    ),
    'commerce_bpost_cancel_order' => array(
      'type' => 'commerce_order',
      'label' => t('Cancel order'),
      'configurable' => FALSE,
    ),
  );
}

/**
 * Mark an order as treated
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_mark_as_treated(&$entity, $context = array()) {
  $entity->status = 'completed';
  commerce_order_save($entity);
}

/**
 * Print labels for the selected orders
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_print_label(&$entity, $context = array()) {
  if (isset($context['bpost_labels'][$entity->order_id])) {
    $label_quantity = $context['bpost_labels'][$entity->order_id];
    if ($label_quantity > 10) {
      return FALSE;
    }
  }
  else {
    $label_quantity = 1;
  }

  $created = FALSE;
  for ($i = 0; $i < $label_quantity; $i++) {
    $created |= commerce_bpost_webservice_create_order($entity, 'commerce_order');
  }

  if ($created) {
    if (commerce_bpost_create_label($entity)) {
      commerce_order_save($entity);
      $commerce_bpost_settings = variable_get('commerce_bpost_settings', array());
      if (isset($commerce_bpost_settings['tracking']['track']) && $commerce_bpost_settings['tracking']['track'] == 'auto') {
        commerce_bpost_tracking_mail($entity);
      }
    }
  }
}

function commerce_bpost_print_label_form($context, $form_state = array()) {
  if (!empty($form_state['values']['views_bulk_operations'])) {
    $file_private_path = variable_get('file_private_path');
    if (empty($file_private_path)) {
      drupal_set_message(t('Path for private files has to be defined. Please <a href="@url">configure private file path in file system settings</a> to be able to generate pdf labels.', array('@url' => url('admin/config/media/file-system'))), 'error');
    }

    $form['label'] = array(
      '#type' => 'fieldset',
      '#title' => t('Quantity of labels for each order.'),
      '#tree' => TRUE,
    );
    foreach ($form_state['values']['views_bulk_operations'] as $order) {
      if (!empty($order)) {
        $form['label'][$order] = array(
          '#type' => 'textfield',
          '#title' => t('Order n°@order_id', array('@order_id' => $order)),
          '#element_validate' => array('commerce_bpost_element_validate_label_quantity'),
          '#default_value' => 1,
        );
      }
    }
  }
  return $form;
}

/**
 * Form element validation handler for integer elements that must be positive.
 */
function commerce_bpost_element_validate_label_quantity($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <= 0)) {
    form_error($element, t('@name must be a positive integer.', array('@name' => $element['#title'])));
  }
  elseif ($value > 10) {
    form_error($element, t('@name must be lower or equal to 10.', array('@name' => $element['#title'])));
  }
}

function commerce_bpost_print_label_submit($form, $form_state) {
  return array('bpost_labels' => $form_state['values']['label']);
}

/**
 * Send T&T email.
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_tracking_mail(&$order, $context = array()) {
  $account = user_load($order->uid);
  $params['account'] = $account;
  $params['order'] = $order;

  if (commerce_bpost_get_order_tracking_urls($order->order_id)) {
    $mail = drupal_mail('commerce_bpost', 'tracking_mail', $account->mail, NULL, $params);
    if ($mail['result']) {
      drupal_set_message(t('Tracking mail sent to %recipient for order %order_id.', array('%recipient' => $mail['to'], '%order_id' => $order->order_id)));
    }
  }
  else {
    drupal_set_message(t('Tracking mail not sent to %recipient for order %order_id. Unable to retrieve barcode.', array('%recipient' => $account->mail, '%order_id' => $order->order_id)), 'error');
  }
}

/**
 * Remove order from bpost order listing
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_create_retour(&$entity, $context = array()) {
  if (isset($context['bpost_labels'][$entity->order_id])) {
    $label_quantity = $context['bpost_labels'][$entity->order_id];
    if ($label_quantity > 10) {
      return FALSE;
    }
  }
  else {
    $label_quantity = 1;
  }

  $created = FALSE;
  for ($i = 0; $i < $label_quantity; $i++) {
    $created |= commerce_bpost_webservice_create_order($entity, 'commerce_order', array('return' => TRUE));
  }

  if ($created) {
    if (commerce_bpost_create_label($entity)) {
      commerce_order_save($entity);
    }
  }
}

function commerce_bpost_create_retour_form($context, $form_state = array()) {
  if (!empty($form_state['values']['views_bulk_operations'])) {
    $form['label'] = array(
      '#type' => 'fieldset',
      '#title' => t('Quantity of labels for each order.'),
      '#tree' => TRUE,
    );
    foreach ($form_state['values']['views_bulk_operations'] as $order) {
      if (!empty($order)) {
        $form['label'][$order] = array(
          '#type' => 'textfield',
          '#title' => t('Order n°@order_id', array('@order_id' => $order)),
          '#element_validate' => array('commerce_bpost_element_validate_label_quantity'),
          '#default_value' => 1,
        );
      }
    }
  }
  return $form;
}

function commerce_bpost_create_retour_submit($form, $form_state) {
  return array('bpost_labels' => $form_state['values']['label']);
}

/**
 * Remove order from bpost order listing
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_unlist_order(&$entity, $context = array()) {
  $entity->type = 'commerce_order';
  commerce_order_save($entity);
}

/**
 * Cancel the order with bpost canceled status.
 *
 * @param object $entity
 *  A fully loaded commerce_order.
 * @param array $context
 *  The context of the action.
 */
function commerce_bpost_cancel_order(&$entity, $context = array()) {
  commerce_bpost_webservice_cancel_order($entity);
  commerce_order_save($entity);
}

/**
 * Implements hook_views_api().
 */
function commerce_bpost_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_bpost') . '/includes/views',
  );
}

/**
 * Implements hook_entity_update().
 */
function commerce_bpost_entity_presave($entity, $type) {
  if ($type == 'commerce_order') {
    $commerce_bpost_settings = variable_get('commerce_bpost_settings', array());
    if ($entity->type == 'bpost') {
      if (!empty($commerce_bpost_settings['mapping']['canceling_status']) && $entity->status == $commerce_bpost_settings['mapping']['canceling_status'] && $entity->status !== $entity->original->status) {
        commerce_bpost_webservice_cancel_order($entity);
      }
    }
    else {
      $bpost = FALSE;
      $order_wrapper = entity_metadata_wrapper('commerce_order', $entity);
      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        if ($line_item_wrapper->getBundle() == 'shipping') {
          $line_item = $line_item_wrapper->value();
          if ($line_item->data['shipping_service']['shipping_method'] == 'bpost') {
            $bpost = TRUE;
            break;
          }
        }
      }

      if ($bpost) {
        // Add do not have a remote id.
        if (!empty($commerce_bpost_settings['mapping']['validation_status']) && $entity->status == $commerce_bpost_settings['mapping']['validation_status'] && $entity->status !== $entity->original->status) {
          $entity->type = 'bpost';
          if (commerce_bpost_check_automatic($commerce_bpost_settings)) {
            commerce_bpost_webservice_create_order($entity, 'commerce_order', array('send_only' => TRUE));
          }
        }
      }
    }
  }
}

function commerce_bpost_check_automatic($settings) {
  return isset($settings['label']['method']) && $settings['label']['method'] === "bpost";
}

//@TODO Remove once https://drupal.org/node/2216243 has been merged.
/**
 * Implements hook_field_info_alter().
 * Add properties on addressfield.
 */
function commerce_bpost_field_info_alter(&$field_info) {
  if (isset($field_info['addressfield'])) {
    $field_info['addressfield']['property_callbacks'][] = 'commerce_bpost_property_info_callback';
  }
}

/**
 * Callback to alter the property info of address fields.
 */
function commerce_bpost_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['property info'] += commerce_bpost_data_property_info();
}

/**
 * Defines additional info for the properties of the address field data structure.
 */
function commerce_bpost_data_property_info($name = NULL) {
  // Build an array of basic property information for the address field.
  $properties = array(
    'phone_number' => array(
      'label' => t('Contact Phone'),
      'description' => t('Contact Phone of field addressfield'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'phone_number_extension' => array(
      'label' => t('Phone Extension'),
      'description' => t('Phone Extension of field addressfield'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'mobile_number' => array(
      'label' => t('Mobile Number'),
      'description' => t('Mobile Number of field addressfield'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'fax_number' => array(
      'label' => t('Fax Number'),
      'description' => t('Fax Number of field addressfield'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );

  return $properties;
}

/**
 * Find bpost shipping line item on the order.
 *
 * @param object $order
 *   An order object
 *
 * @return mixed
 *   The bpost shipping line item object or FALSE.
 */
function _commerce_bpost_get_shipping_line_item($order) {
  $wrapper_order = entity_metadata_wrapper('commerce_order', $order);
  foreach ($wrapper_order->commerce_line_items as $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'shipping') {
      $shipping_service = $line_item_wrapper->commerce_shipping_service->value();
      if (array_search($shipping_service, array('bpost_postoffice_postpoint', 'bpost_bpack')) !== FALSE) {
        return $line_item_wrapper;
      }
    }
  }
  return FALSE;
}

/**
 * Provide google map default settings.
 */
function _commerce_bpost_map_settings() {
  $commerce_bpost_settings = variable_get('commerce_bpost_settings');
  if (!isset($commerce_bpost_settings['gmap'])) {
    $commerce_bpost_settings['gmap'] = array();
  }
  $default_settings = array(
    'google_api_key' => '',
    'id' => 'google-map',
    'width' => '70%',
    'height' => '400px',
    'zoom' => 12,
    'autozoom' => 1,
    'street_view_control' => 0,
    'map_type_control' => 0,
  );
  if (!empty($commerce_bpost_settings['gmap']['zoom'])) {
    $commerce_bpost_settings['gmap']['zoom'] = (int) $commerce_bpost_settings['gmap']['zoom'];
  }

  return $commerce_bpost_settings['gmap'] + $default_settings;
}

/**
 * Element validation callback.
 *
 * We need to store form_state values somewhere else since
 * commerce_shipping_pane_checkout_form() reset pane values.
 */
function _commerce_bpost_pane_value_hack($element, &$form_state, $form) {
  $form_state['values']['commerce_shipping']['commerce_bpost'] = $form_state['values']['commerce_shipping']['service_details'];
}

/**
 * Implements hook_element_info().
 */
function commerce_bpost_element_info() {
  $types['commerce_bpost_map'] = array(
    '#input' => FALSE,
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'commerce_bpost') . '/theme/js/commerce_bpost_gmap.js'),
      'css' => array(drupal_get_path('module', 'commerce_bpost') . '/theme/css/commerce_bpost_gmap.css'),
    ),
    '#theme' => 'commerce_bpost_map',
  );
  return $types;
}

/**
 * Map theme hook.
 */
function theme_commerce_bpost_map($variables) {
  $element = $variables['element'];
  $bpost_map = $element['#map'];
  $attributes = array(
    'id' => $bpost_map['id'],
    'class' => 'commerce-bpost-map',
    'style' => 'width: ' . $bpost_map['width'] . '; height: ' . $bpost_map['height'],
  );
  $output = '<div' . drupal_attributes($attributes) . '>' . t('Fail to load google map') . '<noscript>' . t('Javascript is required to view this map.') . '</noscript></div>';

  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_bpost_form_commerce_checkout_form_shipping_alter(&$form, &$form_state, $form_id) {
  if (isset($form['commerce_shipping']['shipping_service'])) {
    // Add description on bpost services.
    // TODO: http://drupal.org/node/2010738 solved but we need a new release
    // to make a dependency on it.
    $bpost_services = commerce_shipping_services('bpost');
    $has_bpost_service = FALSE;
    foreach ($form['commerce_shipping']['shipping_service']['#options'] as $shipping_service_name => $shipping_service) {
      if (array_key_exists($shipping_service_name, $bpost_services)) {
        $has_bpost_service = TRUE;
        $form['commerce_shipping']['shipping_service'][$shipping_service_name] = array(
          '#description' => $bpost_services[$shipping_service_name]['description'],
        );
      }
    }

    if ($has_bpost_service) {
      // Load Google Map API.
      global $language;
      $bpost_map = _commerce_bpost_map_settings();
      $query = array(
        'v' => '3',
        'language' => $language->language,
        'sensor' => 'false',
      );
      if (!empty($bpost_map['google_api_key'])) {
        $query += array(
          'key' => $bpost_map['google_api_key'],
        );
      }
      $form['#attached']['js'][url(
        'http://maps.googleapis.com/maps/api/js', array(
          'query' => $query,
          'external' => TRUE,
        )
      )] = array('type' => 'external', 'group' => JS_LIBRARY);
      $form['#attached']['css'][] = drupal_get_path('module', 'commerce_bpost') . '/theme/css/commerce_bpost.css';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_bpost_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_bpost') . '/theme/css/commerce_bpost.css';
}

/**
 * Check if the administrator filled in credentials needed to run the module.
 * @return bool
 */
function commerce_bpost_check_minimal_config_requirement($commerce_bpost_settings) {
  return isset($commerce_bpost_settings['account']['account_id'],
    $commerce_bpost_settings['account']['passphrase'],
    $commerce_bpost_settings['account']['api_url'],
    $commerce_bpost_settings['account']['bpack_user'],
    $commerce_bpost_settings['account']['bpack_passkey']
  );
}

/**
 * Implements hook_mail().
 */
function commerce_bpost_mail($key, &$message, $params) {
  $variables = array('user' => $params['account']);

  if (isset($params['order'])) {
    $variables['commerce-order'] = $params['order'];
  }
  $message['subject'] .= _commerce_bpost_mail_text($key . '_subject', $variables);
  $message['body'][] = _commerce_bpost_mail_text($key . '_body', $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by commerce_bpost_mail() and the settings forms to retrieve strings.
 */
function _commerce_bpost_mail_text($key, $variables = array(), $replace = TRUE) {
  $commerce_bpost_settings = variable_get('commerce_bpost_settings', array());
  if (!empty($commerce_bpost_settings['tracking']['email'][$key])) {
    // An admin setting overrides the default string.
    $text = $commerce_bpost_settings['tracking']['email'][$key];
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'tracking_mail_subject':
        $text = t('Order #[commerce-order:order-id] tracking information at [site:name]');
        break;
      case 'tracking_mail_body':
        $text = t("[user:name],

Your order (#[commerce-order:order-id]) has been processed and will be shipped by bpost. You may now track by clicking following link(s) or copying and pasting into your browser:

[bpost-tracking-url]

Thank you

--  [site:name] team");
        break;
    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('callback' => 'commerce_bpost_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
  }

  return $text;
}

/**
 * Token callback to add custom tokens for bpost mails.
 *
 * @see user_mail_tokens()
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
function commerce_bpost_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['commerce-order'])) {
    $deeplink = commerce_bpost_get_order_tracking_urls($data['commerce-order']->order_id);
  }
  $replacements['[bpost-tracking-url]'] = $deeplink;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_bpost_commerce_order_status_info() {
  $return_statuses = array();

  $return_statuses['bpost_printed'] = array(
    'name' => 'bpost_printed',
    'title' => t('Printed'),
    'state' => 'pending',
  );

  $return_statuses['bpost_sent'] = array(
    'name' => 'bpost_sent',
    'title' => t('Sent to bpost'),
    'state' => 'completed',
  );

  return $return_statuses;
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_bpost_field_formatter_info() {
  return array(
    'commerce_bpost_file' => array(
      'label' => t('Generic file (new tab)'),
      'field types' => array('file'),
    ),
    'commerce_bpost_barcode' => array(
      'label' => t('bpost barcode link'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_bpost_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'commerce_bpost_file':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'commerce_bpost_file_link',
          '#file' => (object) $item,
        );
      }
      break;

    case 'commerce_bpost_barcode':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => commerce_bpost_get_tracking_url($item['value']));
      }
      break;
  }

  return $element;
}

/**
 * Returns HTML for a link to a file.
 *
 * @param $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "file_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_commerce_bpost_file_link($variables) {
  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = file_create_url($file->uri);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
      'target' => '_blank',
    ),
  );

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = check_plain($file->filename);
  }

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_bpost_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Split address number & name.
 *
 * @param $thoroughfare
 * @return array|bool
 */
function commerce_bpost_split_number_address_name($thoroughfare) {
  preg_match('#(\d+)#', $thoroughfare, $matches);
  if (isset($matches[1])) {
    $street_name = str_replace($matches[1], '', $thoroughfare);
    $street_number = $matches[1];
    return array(
      'street_name'   => $street_name,
      'street_number' => $street_number,
    );
  }

  return FALSE;
}

/**
 * Implements hook_views_post_render().
 */
function commerce_bpost_views_post_render(&$view, &$output, &$cache) {
  // Fix the overlapping search box on title of columns.
  if ($view->name == 'commerce_backoffice_orders' && in_array($view->current_display, array('bpost_open_orders', 'bpost_treated_orders'))) {
    drupal_add_css('.commerce-backoffice-view div.attachment-before {height: 45px;}', array('type' => 'inline'));
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function commerce_bpost_preprocess_entity(&$variables) {
  if ($variables['entity_type'] == "commerce_order") {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $variables['commerce_order']);

    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if ($line_item_wrapper->getBundle() == 'shipping') {
        $line_item = $line_item_wrapper->value();
        if ($line_item->data['shipping_service']['shipping_method'] == 'bpost') {
          // Only display if we have a bpost shipping service selected.
          $content = array(
            'title' => $line_item_wrapper->line_item_label->value(),
            'price' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $line_item_wrapper->commerce_unit_price->currency_code->value()),
          );
          // If there is a delivery point, add details about it.
          if ($line_item_wrapper->commerce_shipping_service->value() == 'bpost_bpack' || $line_item_wrapper->commerce_shipping_service->value() == 'bpost_postoffice_postpoint') {
            $content['point_details'] = theme_commerce_bpost_point(array('point' => $line_item->data['point_details']['Poi']));
          }
          if ($line_item_wrapper->commerce_shipping_service->value() == 'bpost_bpack') {
            $variables['content']['commerce_bpost_shipping_service']['title'] = array(
              "#markup" => '<h2 class="title">' . t('Parcel locker') . '</h2>',
            );
            $variables['content']['commerce_bpost_shipping_service']['rc_code'] = array(
              "#markup" => t('RC code: @rc_code', array('@rc_code' => $line_item->data['bpack_member']))
            );
          }
          elseif ($line_item_wrapper->commerce_shipping_service->value() == 'bpost_postoffice_postpoint') {
            $variables['content']['commerce_bpost_shipping_service']['title'] = array(
              "#markup" => '<h2 class="title">' . t('Bpost postpoint') . '</h2>',
            );
          }
          $variables['content']['commerce_bpost_shipping_service']['content'] = array(
            "#markup" => theme('commerce_bpost_shipping_service', array('content' => $content)),
          );
        }
      }
    }
  }
}

/**
 * Unable bpack and postpoint services since we need to select a delivery point on the frontoffice.
 */
function commerce_bpost_form_commerce_order_ui_order_form_alter(&$form, &$form_state, $form_id) {
  // When we add a manual order in the backend
  // If destination country is Belgium only @home should be possible.
  // If country is other then Belgium only @World should be available.
  if (isset($form_state['input']['commerce_customer_shipping']['und']['profiles'][0]['commerce_customer_address']['und'][0]['country'])) {
    $country = $form_state['input']['commerce_customer_shipping']['und']['profiles'][0]['commerce_customer_address']['und'][0]['country'];
  }
  elseif (!empty($form_state['commerce_order']->commerce_customer_shipping)) {
    $wrapper_order = entity_metadata_wrapper('commerce_order', $form_state['commerce_order']);
    $commerce_customer_address = $wrapper_order->commerce_customer_shipping->commerce_customer_address;
    $country = $commerce_customer_address->country->value();
  }
  if (isset($country)) {
    if ($country == 'BE') {
      unset($form['commerce_line_items'][LANGUAGE_NONE]['actions']['custom_rate']['shipping_service']['#options']['bpost_world']);
    }
    else {
      unset($form['commerce_line_items'][LANGUAGE_NONE]['actions']['custom_rate']['shipping_service']['#options']['bpost_home']);
    }
  }

  // In all cases, bpact and postpoint services are disable in backoffice.
  unset($form['commerce_line_items'][LANGUAGE_NONE]['actions']['custom_rate']['shipping_service']['#options']['bpost_bpack']);
  unset($form['commerce_line_items'][LANGUAGE_NONE]['actions']['custom_rate']['shipping_service']['#options']['bpost_postoffice_postpoint']);

}

/**
 * Hide bpost order tab if drupal method is not set for managing label.
 */
function commerce_bpost_access_order() {
  $commerce_bpost_settings = variable_get('commerce_bpost_settings', array());
  return $commerce_bpost_settings['label']['method'] == 'drupal';
}

/**
 * Return an acceptable language code for bpost.
 */
function commerce_bpost_get_current_language() {
  if (isset($GLOBALS['language']->language)) {
    switch ($GLOBALS['language']->language) {
      case 'fr':
        $code = 'FR';
        break;
      case 'de':
        $code = 'DE';
        break;
      case 'nl':
        $code = 'NL';
        break;
      default :
        $code = 'EN';
        break;
    }
    return $code;
  }
  return 'EN';
}